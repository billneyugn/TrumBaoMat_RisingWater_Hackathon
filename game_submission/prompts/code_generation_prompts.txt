# ðŸ’» Rising Waters: Code Architecture & Implementation Prompts

## Modular JavaScript Architecture

### Core Game Engine
- "Implement centralized game state management with clear data flow"
- "Create modular functions for initialization, gameplay loop, and state updates"
- "Design event-driven architecture with proper separation of concerns"
- "Implement robust error handling with graceful degradation"

### Game State Management
- "Centralized state object tracking: metrics, current event, round, game status"
- "Immutable state updates using pure functions for predictability"
- "State validation and boundary checking (0-100 range for metrics)"
- "Local storage integration for scenario persistence"

### Event System Architecture
- "Randomized event deck with Fisher-Yates shuffle algorithm"
- "Event progression system with proper round management"
- "Action execution with cost validation and effect application"
- "Win/loss condition evaluation with clear feedback"

### UI Rendering Engine
- "Declarative UI updates based on game state changes"
- "Efficient DOM manipulation with minimal reflows"
- "Responsive layout calculations for different screen sizes"
- "Animation coordination with game state transitions"

### Data Management
- "JSON-based content system for events, actions, and translations"
- "Dynamic loading of scenario-specific game data"
- "Error handling for missing or corrupted data files"
- "Fallback mechanisms for network failures"

### Localization System
- "i18n function supporting multiple languages with fallbacks"
- "Real-time language switching without page reload"
- "Translation key management with validation"
- "Cultural adaptation for Vietnamese content"

### Performance Optimization
- "Lazy loading of non-critical resources"
- "Debounced user interactions to prevent rapid-fire actions"
- "Efficient array operations and object property access"
- "Memory management with proper cleanup of event listeners"

### Browser Compatibility
- "ES6+ features with polyfills for older browsers"
- "CSS Grid and Flexbox with appropriate fallbacks"
- "Cross-browser testing and compatibility fixes"
- "Progressive enhancement for modern features"

### Code Quality Standards
- "ESLint configuration for consistent code style"
- "JSDoc documentation for all public functions"
- "Unit test structure for core game logic"
- "Modular file organization with clear dependencies"

### Security Considerations
- "Input sanitization for all user interactions"
- "XSS prevention in dynamic content rendering"
- "Safe JSON parsing with error handling"
- "Content Security Policy implementation"

### Accessibility Implementation
- "ARIA labels and roles for screen readers"
- "Keyboard navigation for all interactive elements"
- "Focus management for modal dialogs"
- "High contrast mode support"

### Testing Strategy
- "Automated testing for game logic functions"
- "Manual testing protocols for different scenarios"
- "Cross-browser compatibility testing"
- "Performance testing on various devices"

### Deployment Architecture
- "Static file serving with proper caching headers"
- "CDN integration for asset delivery"
- "Service worker for offline functionality"
- "Progressive Web App features"

### Maintenance & Updates
- "Configuration-driven game parameters"
- "Easy content updates through JSON modification"
- "Version control for game data and translations"
- "Monitoring and analytics integration"